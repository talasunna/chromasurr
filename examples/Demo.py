# ── 1. Imports & System ─────────────────────────────────────────────────────────from CADETProcess.processModel import (    ComponentSystem, Langmuir,    Inlet, LumpedRateModelWithoutPores, Outlet,    FlowSheet, Process)from CADETProcess.simulator import Cadet# Define speciessystem = ComponentSystem()system.add_component('A')system.add_component('B')# ── 2. Binding Model ──────────────────────────────────────────────────────────langmuir = Langmuir(system, name='Langmuir')langmuir.is_kinetic      = Falselangmuir.adsorption_rate = [0.02, 0.03]langmuir.desorption_rate = [1, 1]langmuir.capacity        = [100, 100]# ── 3. Units ───────────────────────────────────────────────────────────────────feed    = Inlet(system, name='feed');    feed.c = [10, 10]eluent  = Inlet(system, name='eluent');  eluent.c = [0, 0]column  = LumpedRateModelWithoutPores(system, name='column')column.binding_model = langmuircolumn.length        = 0.6column.diameter      = 0.024column.axial_dispersion   = 4.7e-7column.total_porosity     = 0.7column.solution_recorder.write_solution_bulk = Trueoutlet = Outlet(system, name='outlet')# ── 4. Flowsheet ───────────────────────────────────────────────────────────────fs = FlowSheet(system)fs.add_unit(feed,   feed_inlet=True)fs.add_unit(eluent, eluent_inlet=True)fs.add_unit(column)fs.add_unit(outlet, product_outlet=True)fs.add_connection(feed,   column)fs.add_connection(eluent, column)fs.add_connection(column, outlet)# ── 5. Process ────────────────────────────────────────────────────────────────proc = Process(fs, 'batch elution')Q = 60/(60*1e6)proc.add_event('feed_on',  'flow_sheet.feed.flow_rate',   Q)proc.add_event('feed_off', 'flow_sheet.feed.flow_rate',   0.0)proc.add_event('eluent_on',  'flow_sheet.eluent.flow_rate', Q)proc.add_event('eluent_off', 'flow_sheet.eluent.flow_rate', 0.0)proc.add_duration('feed_duration')proc.add_event_dependency('eluent_on',  ['feed_off'])proc.add_event_dependency('eluent_off', ['feed_on'])proc.add_event_dependency('feed_off',                          ['feed_on','feed_duration'], [1,1])proc.cycle_time = 600proc.feed_duration.time = 60# ── 6. Simulate & Plot ────────────────────────────────────────────────────────sim = Cadet().simulate(proc)fig, ax = sim.solution.outlet.outlet.plot()ax.set_title('Outlet Profiles of A & B')ax.set_xlabel('Time (s)')ax.set_ylabel('Concentration')# ── 1. Extract basic metrics from one run ─────────────────────────────────────from chromasurr.metrics import extract# run a single simulationsim = Cadet().simulate(proc)# get peak‐width, retention_time, num_platesm = extract(sim)print("Baseline metrics:", m)# → {'peak_width':  y, 'retention_time': t, 'num_plates': N}# ── 2. Global Sobol Sensitivity Analysis ──────────────────────────────────────from chromasurr.sensitivity import run_sensitivity_analysis# 2.1 Map human‐readable names to your process’s attributes:param_config = {    'ads_A':   'flow_sheet.column.binding_model.adsorption_rate[0]',    'ads_B':   'flow_sheet.column.binding_model.adsorption_rate[1]',    'des_A':   'flow_sheet.column.binding_model.desorption_rate[0]',    'des_B':   'flow_sheet.column.binding_model.desorption_rate[1]',    'cap_A':   'flow_sheet.column.binding_model.capacity[0]',    'cap_B':   'flow_sheet.column.binding_model.capacity[1]',}# 2.2 Specify bounds for eachbounds = {    'ads_A': [0.01, 0.05],    'ads_B': [0.01, 0.05],    'des_A': [0.5,  2.0 ],    'des_B': [0.5,  2.0 ],    'cap_A': [50,   150 ],    'cap_B': [50,   150 ],}# 2.3 Run Sobol (here only tracking retention_time and peak_width)sobol_res = run_sensitivity_analysis(    proc,    param_config,    bounds,    metric_names=['retention_time','peak_width'],    n_samples=256)# sobol_res is a dict like# {#   'retention_time': {'S1': array([...]), 'ST': array([...]), …},#   'peak_width':     {...}# }# Printed automatically to the console during analysis.# ── 3. Building & Using a Gaussian‐process Surrogate ───────────────────────────from chromasuur.surrogate import Surrogateimport numpy as np# 3.1 Instantiate: feed it the same mappings, plus which metrics you want to modelsur = Surrogate(    proc,    param_config=param_config,    bounds=bounds,    metrics=['retention_time','peak_width'],    n_train=64,      # how many Sobol‐sampled training sims    seed=123)# 3.2 Train GPs on those Sobol samplessur.train()# 3.3 (Optional) Run Sobol *on the surrogate* to get super‐cheap sensitivitysur.analyze_sensitivity(n_samples=64)print("Surrogate Sobol:", sur.sensitivity)# 3.4 Prune away unimportant inputs (total‐index < 0.05)sur.select_important_params(threshold=0.05)print("Keeping only:", sur.top_params)# 3.5 Retrain using only the “top” parameterssur.retrain()# 3.6 Predict new metric values without rerunning CADET#    e.g. for a new adsorption/desorption setting:X_new = np.array([    [0.03, 0.02,   1.0, 1.2,   120, 80],   # [ads_A,ads_B,des_A,des_B,cap_A,cap_B]])rt_pred = sur.predict('retention_time', X_new)pw_pred = sur.predict('peak_width', X_new)print("Predicted RT:", rt_pred, "Predicted PW:", pw_pred)