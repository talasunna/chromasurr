"""calibration.pyContains inverse modeling routines for parameter calibration using surrogate models.Supports both point-estimate optimization and (placeholder) Bayesian inference."""from typing import Callableimport numpy as npfrom scipy.optimize import minimizefrom surrogate import Surrogatedef calibrate_surrogate(    surrogate: Surrogate,    y_obs: float,    metric: str) -> np.ndarray:    """    Estimate parameters by minimizing the squared error between surrogate prediction and observed data.    Parameters    ----------    surrogate : Surrogate        A trained surrogate model.    y_obs : float        Observed scalar value to match.    metric : str        Metric name to calibrate (e.g., "retention_time").    Returns    -------    np.ndarray        Estimated parameter vector minimizing the squared loss.    """    def loss_fn(x: np.ndarray) -> float:        y_pred = surrogate.predict(metric, x.reshape(1, -1))[0]        return float((y_pred - y_obs) ** 2)    lb, ub = zip(*surrogate.bounds.values())    x0 = np.array(lb) + 0.5 * (np.array(ub) - np.array(lb))    result = minimize(        loss_fn,        x0,        bounds=list(surrogate.bounds.values()),        method="L-BFGS-B"    )    return result.xdef make_posterior_sampler(posterior: np.ndarray) -> Callable[[int], np.ndarray]:    """    Wrap a set of posterior samples into a sampling function.    Parameters    ----------    posterior : np.ndarray        Array of posterior samples of shape (n_samples, n_params).    Returns    -------    Callable[[int], np.ndarray]        Function returning `n` samples drawn from the posterior.    """    def sample(n: int) -> np.ndarray:        idx = np.random.choice(posterior.shape[0], size=n, replace=True)        return posterior[idx]    return sample