# src/chromasurr/metrics.pyfrom typing import Tupleimport numpy as npfrom CADETProcess.simulationResults import SimulationResultsdef extract(    sim: SimulationResults,    chromatogram_index: int = 0) -> Tuple[float, float]:    """    From a SimulationResults, return (peak_height, retention_time)    for the specified chromatogram index (default = 0).    Parameters    ----------    sim : SimulationResults        The results of Cadet().simulate(Process).    chromatogram_index : int        Which chromatogram in `sim.chromatograms` to use.    Returns    -------    peak_height : float    retention_time : float    """    # Ensure valid index    n = len(sim.chromatograms)    if chromatogram_index < 0:        raise ValueError(            f"chromatogram_index must be between 0 and {n-1}, "            f"but got {chromatogram_index}"        )    # Grab the chromatogram    chrom = sim.chromatograms[chromatogram_index]    t = chrom.time    # total_concentration if available, else fallback to c    try:        c = chrom.total_concentration    except AttributeError:        c = chrom.c    # Compute peak and retention    idx_max = int(np.argmax(c))    peak_height = float(c[idx_max].item())    retention_time = float(t[idx_max].item())    return peak_height, retention_time